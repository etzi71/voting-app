pipeline {
  agent { label 'master1' }
  parameters {
        string(name: 'HELM_NAME', defaultValue: 'my-vote', description: 'The Helm name')
        string(name: 'HELM_DIR' , defaultValue: 'helm_chart', description: 'The Helm name')
        string(name: 'VALUES_FILE_NAME', defaultValue: 'values.yaml', description: 'The Helm values file name')
        string(name: 'GCP_CLUSTER_NAME', defaultValue: 'clouddeploy-311607-gke', description: 'The GCP cluster name')
        string(name: 'GCP_PROJECT_NAME', defaultValue: 'clouddeploy-311607', description: 'The GCP project name')
        string(name: 'GCP_REGION_NAME', defaultValue: 'europe-west1', description: 'The GCP region name')
        string(name: 'GCP_CLUSTER_VPC_NAME', defaultValue: 'clouddeploy-311607-vpc', description: 'The GCP VPC name')
        string(name: 'VOTE_PORT', defaultValue: '31000', description: 'The VOTE app port')
        string(name: 'RESULT_PORT', defaultValue: '31001', description: 'The RESULT app port')
    }

  stages {
    stage('gcloud config') {
      steps {
        sh "/snap/bin/gcloud container clusters get-credentials ${params.GCP_CLUSTER_NAME} --region ${params.GCP_REGION_NAME} --project ${params.GCP_PROJECT_NAME}"
      }
    }
    stage('Install') {
      steps {
        sh "cd ${env.WORKSPACE}/${params.HELM_DIR}; /snap/bin/helm install ${params.HELM_NAME} ."
      }
    }
    stage('gcloud create firewall-rules') {
           steps {
               script {
                   try {
                          sh "/snap/bin/gcloud compute firewall-rules create node-port-${params.VOTE_PORT} --network ${params.GCP_CLUSTER_VPC_NAME} --allow tcp:${params.VOTE_PORT}"
                          sh "/snap/bin/gcloud compute firewall-rules create node-port-${params.RESULT_PORT} --network ${params.GCP_CLUSTER_VPC_NAME} --allow tcp:${params.RESULT_PORT}"
                   }     
                  catch (all) {
                         echo 'Exception occurred'
                  }
               }
            }
     }       
  }    
}
